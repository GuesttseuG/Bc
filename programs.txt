															
=========================================================== PRACTICAL 1 : ===========================================================
    
1. Write a program to implement symmetric encryption using Ceaser Cipher algorithm.
def encrypt(text,s):
    result = ""
    for i in range(len(text)):
        char = text[i]
        if (char == " "):
            result += " "
        else:
            if (char.isupper()):
                result += chr((ord(char) + s - 65) % 26 + 65)
            else:
                result += chr((ord(char) + s - 97) % 26 + 97)
    return result
print("CEASER CIPHER DEMO")
text = input("Enter text to encrypt : ")
s = int(input("Enter shift pattern : "))
print("Plain Text : " + text)
print("Shift Pattern : " + str(s))
print("Cipher Text : " + encrypt(text, s))
 
 
   
 
 
 
2. Write a program to implement asymmetric encryption using RSA algorithm. Generate both the keys public key and private key and store it in file. Also encrypt and decrypt the message using keys.
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from binascii import hexlify
message = b"Public and Private key encryption"
private_key = RSA.generate(1024)
public_key = private_key.public_key()
print(type(private_key), type(public_key))
private_pem = private_key.export_key().decode()
public_pem = public_key.export_key().decode()
print(type(private_pem), type(public_pem))
with open('private_pem.pem', 'w') as pr:
    pr.write(private_pem)
with open('public_pem.pem', 'w') as pr:
    pr.write(public_pem)
pr_key = RSA.import_key(open('private_pem.pem', 'r').read())
pu_key = RSA.import_key(open('public_pem.pem', 'r').read())
print(type(pr_key), type(pu_key))
cipher = PKCS1_OAEP.new(key=pu_key)
cipher_text = cipher.encrypt(message)
print(cipher_text)
decrypt = PKCS1_OAEP.new(key=pr_key)
decrypted_message= decrypt.decrypt(cipher_text)
print(decrypted_message)
 
 
 
 
 
 
 
3. Write a program to demonstrate the use of Hash Functions (SHA-256).
import hashlib
string  = "hello how are you?"
encoded = string.encode()
result = hashlib.sha256(encoded)
print("String : ", end="")
print(string)
print("Hash Value : ", end="")
print(result)
print("Hexadecimal Equivalent : ", result.hexdigest())
print("Digest Size : ", end="")
print(result.digest_size)
print("Block Size : ", end="")
print(result.block_size)
 
 
 
 
 
 
4. Write a program to demonstrate Merkle Tree.
var merkle = require('merkle')
var str = 'Fred, Bert, Bill, Bob, Alice, Trent';
var arr = str.split(',');
console.log("Input :\t\t",arr);
var tree = merkle('sha1').sync(arr);
console.log("Root Hash :\t", tree.root());
console.log("Tree Depth :\t", tree.depth());
console.log("Tree Levels :\t", tree.levels());
console.log("Tree Nodes :\t", tree.nodes());
var i;
for(i = 0; i<tree.levels(); i++){
    console.log("\nLevel ", i);
    console.log(tree.level(i));
}
 
 
 
 
 
 
																														 															
=========================================================== PRACTICAL 2 : ===========================================================
    
1.Write a program to create the chain with Genesis block and adding block into blockchain and validating the chain for any alteration. (Part-I)
const SHA256 = require('crypto-js/sha256');
class Block {
    constructor(index, timestamp, data, previousHash = '') {
        this.index = index;
        this.timestamp = timestamp;
        this.data = data;
        this.previousHash = previousHash;
        this.hash = this.calculateHash();
    }
    calculateHash() {
        return SHA256(this.index + this.timestamp + this.previousHash + JSON.stringify(this.data)).toString();
    }
}
class Blockchain {
    constructor() {
        this.chain = [this.createGenesisBlock()];
    }
    createGenesisBlock() {
        return new Block(0, "31/08/2023", "data of genesis block", "0");
    }
    getLatestBlock() {
        return this.chain[this.chain.length - 1];
    }
    addBlock(newBlock) {
        newBlock.previousHash = this.getLatestBlock().hash;
        newBlock.hash = newBlock.calculateHash();
        this.chain.push(newBlock);
    }
    isChainValid() {
        for (let i = 1; i < this.chain.length; i++) {
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];
            if (currentBlock.hash !== currentBlock.calculateHash()) {
                return false;
            }            
            if (currentBlock.previousHash !== previousBlock.hash) {
                return false;
            }
        }
        return true;
    }
}
let myCoin = new Blockchain();
console.log("Adding blocks...");
myCoin.addBlock(new Block(1, "01/09/2023", { amount: 4000 }));
myCoin.addBlock(new Block(2, "02/09/2023", { amount: 4500 }));
console.log('Is blockchain valid? ' + myCoin.isChainValid());
myCoin.chain[2].data = { amount: 5500 };
console.log('Is blockchain valid? ' + myCoin.isChainValid());
 
 
 
 
    
    
2. Write a program to implementing proof of work for blockchain. (Part-II)
const SHA256 = require('crypto-js/sha256');
class Block {
    constructor(index, timestamp, data, previousHash = '') {
        this.index = index;
        this.timestamp = timestamp;
        this.data = data;
        this.previousHash = previousHash;
        this.hash = this.calculateHash();
        this.nonce = 0;  
    }
    calculateHash() {
        return SHA256(this.index + this.timestamp + this.previousHash + JSON.stringify(this.data) + this.nonce).toString();
    }
    mineBlock(difficulty) {
        while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join("0")) {
            this.nonce++;
            this.hash = this.calculateHash();
        }
        console.log("Block mined! Hash: " + this.hash + " mined successfully.");
        console.log("Nonce: " + this.nonce);
    }
}
class Blockchain {
    constructor() {
        this.chain = [this.createGenesisBlock()];
        this.difficulty = 4; 
    }
    createGenesisBlock() {
        return new Block(0, "31/08/2023", "data of genesis block", "0");
    }
    getLatestBlock() {
        return this.chain[this.chain.length - 1];
    }
    addBlock(newBlock) {
      newBlock.previousHash = this.getLatestBlock().hash;
        newBlock.mineBlock(this.difficulty);
        this.chain.push(newBlock);
    }
    isChainValid() {
        for (let i = 1; i < this.chain.length; i++) {
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];
            if (currentBlock.hash !== currentBlock.calculateHash()) {
                return false;
            }
            if (currentBlock.previousHash !== previousBlock.hash) {
                return false;
            }
        }
        return true;
    }
}
let myCoin = new Blockchain();
console.log("Mining the blocks...");
myCoin.addBlock(new Block(1, "01/09/2023", { amount: 4000 }));
myCoin.addBlock(new Block(2, "02/09/2023", { amount: 4500 }));
 
 
 
 
 
 
3. Write a program to add multiple transactions into block and give reward to miner for successful mining of block in blockchain. (Part-III)
const SHA256 = require('crypto-js/sha256');
class Transaction {
    constructor(fromAddress, toAddress, amount) {
        this.fromAddress = fromAddress;
        this.toAddress = toAddress;
        this.amount = amount;
    }
}
class Block {
    constructor(timestamp, transactions, previousHash = '') {
        this.timestamp = timestamp;
        this.transactions = transactions;
        this.previousHash = previousHash;
        this.hash = this.calculateHash();
        this.nonce = 0; // A counter used in proof of work
    }
    calculateHash() {
        return SHA256(this.timestamp + this.previousHash + JSON.stringify(this.transactions) + this.nonce).toString();
    }
    mineBlock(difficulty) {
        while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join("0")) {
            this.nonce++;
            this.hash = this.calculateHash();
        }
        console.log("Block " + this.hash + " mined successfully.");
        console.log("Nonce: " + this.nonce);
    }
}
class Blockchain {
    constructor() {
        // Initialize the blockchain with a genesis block
        this.chain = [this.createGenesisBlock()];
        this.difficulty = 4; // Difficulty level for mining
        this.pendingTransactions = []; // Transactions waiting to be mined
        this.miningReward = 100; 
    }
    createGenesisBlock() {
        return new Block("31/08/2023", "data of genesis block", "0");
    }
    getLatestBlock() {
        return this.chain[this.chain.length - 1];
    }
    minePendingTransaction(miningRewardAddress) {
        let block = new Block(Date.now(), this.pendingTransactions, this.getLatestBlock().hash);
        block.mineBlock(this.difficulty);
        console.log("Block mined successfully!");
        this.chain.push(block);
        this.pendingTransactions = [new Transaction(null, miningRewardAddress, this.miningReward)];
    }
    createTransaction(transaction) {
        this.pendingTransactions.push(transaction);
    }
    getBalanceOfAddress(address) {
        let balance = 0;
        for (const block of this.chain) {
            for (const trans of block.transactions) {
                if (trans.fromAddress == address) {
                    balance -= trans.amount;
                }
                if (trans.toAddress == address) {
                    balance += trans.amount;
                }
            }
        }
        return balance;
    }
    isChainValid() {
        for (let i = 1; i < this.chain.length; i++) {
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];
            if (currentBlock.hash !== currentBlock.calculateHash()) {
                return false;
            }
            if (currentBlock.previousHash !== previousBlock.hash) {
                return false;
            }
        }
        return true;
    }
}
let myCoin = new Blockchain();
myCoin.createTransaction(new Transaction('address1', 'address2', 100));
myCoin.createTransaction(new Transaction('address2', 'address1', 40));
console.log("Start mining...");
myCoin.minePendingTransaction('Tata-Address');
console.log("Balance of Tata-Address : ", myCoin.getBalanceOfAddress('Tata-Address'));
 
 
 
 
 
 
4. Write a program to sign the transaction with private key and verify the signed transactions for blockchain. (Part-IV)
keygenerator.js
const EC = require('elliptic').ec;
const ec = new EC('secp256k1');
const key = ec.genKeyPair();
const publicKey = key.getPublic('hex');
const privateKey = key.getPrivate('hex');
console.log('Private Key: ', privateKey);
console.log('Public Key: ', publicKey);
 
 
blockchain.js
const EC = require('elliptic').ec;
const ec = new EC('secp256k1');
const SHA256 = require('crypto-js/sha256');
class Transaction {
    constructor(fromAddress, toAddress, amount) {
        this.fromAddress = fromAddress;
        this.toAddress = toAddress;
        this.amount = amount;
    }
    calculateHash() {
        return SHA256(this.fromAddress + this.toAddress + this.amount).toString();
    }
    signTransaction(signingKey) {
        if (signingKey.getPublic('hex') !== this.fromAddress) {
            throw new Error('You cannot sign a transaction for other wallets!');
        }
        const hashTx = this.calculateHash();
        const sig = signingKey.sign(hashTx, 'base64');
        this.signature = sig.toDER('hex');
    }
    isValid() {
        if (this.fromAddress == null) return true;
        if (!this.signature || this.signature.length == 0) {
            throw new Error('No signature in this transaction!');
        }
        const publicKey = ec.keyFromPublic(this.fromAddress, 'hex');
        return publicKey.verify(this.calculateHash(), this.signature);
    }
}
class Block {
    constructor(timestamp, transactions, previousHash = '') {
        this.timestamp = timestamp;
        this.transactions = transactions;
        this.previousHash = previousHash;
        this.hash = this.calculateHash();
        this.nonce = 0;
    }
    calculateHash() {
        return SHA256(this.timestamp + this.previousHash + JSON.stringify(this.transactions) + this.nonce).toString();
    }
    mineBlock(difficulty) {
        while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join("0")) {
            this.nonce++;
            this.hash = this.calculateHash();
        }
        console.log("Block " + this.hash + " mined successfully.");
        console.log("Nonce: " + this.nonce);
    }
    hasValidTransactions() {
        for (const tx of this.transactions) {
            if (!tx.isValid()) {
                return false;
            }
        }
        return true;
    }
}
class Blockchain {
    constructor() {
        this.chain = [this.createGenesisBlock()];
        this.difficulty = 4;
        this.pendingTransactions = [];
        this.miningReward = 100;
    }
    createGenesisBlock() {
        return new Block("31/08/2023", "data of genesis block", "0");
    }
    getLatestBlock() {
        return this.chain[this.chain.length - 1];
    }
    minePendingTransaction(miningRewardAddress) {
        let block = new Block(Date.now(), this.pendingTransactions, this.getLatestBlock().hash);
        block.mineBlock(this.difficulty);
        console.log("Block mined successfully!");
        this.chain.push(block);
        this.pendingTransactions = [new Transaction(null, miningRewardAddress, this.miningReward)];
    }
    addTransaction(transaction) {
        if (!transaction.fromAddress || !transaction.toAddress) {
            throw new Error('Transaction must include to and from addresses!');
        }
        if (!transaction.isValid()) {
            throw new Error('Cannot add an invalid transaction!');
        }
        this.pendingTransactions.push(transaction);
    }
    getBalanceOfAddress(address) {
        let balance = 0;
        for (const block of this.chain) {
            for (const trans of block.transactions) {
                if (trans.fromAddress == address) {
                    balance -= trans.amount;
                }
                if (trans.toAddress == address) {
                    balance += trans.amount;
                }
            }
        }
        return balance;
    }
    isChainValid() {
        for (let i = 1; i < this.chain.length; i++) {
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i - 1];
 
            if (!currentBlock.hasValidTransactions()) {
                return false;
            }
            if (currentBlock.hash !== currentBlock.calculateHash()) {
                return false;
            }
            if (currentBlock.previousHash !== previousBlock.hash) {
                return false;
            }
        }
        return true;
    }
}
module.exports.Blockchain = Blockchain;
module.exports.Transaction = Transaction;
 
 
main.js
const EC = require('elliptic').ec;
const ec = new EC('secp256k1');
const SHA256 = require('crypto-js/sha256');
const { Transaction, Blockchain } = require('./blockchain');
const myKey = ec.keyFromPrivate('6032bd25459227eea1bf1ffde848bb29de2fb730d34e5dab292080f78b60a9be');
const myWalletAddress = myKey.getPublic('hex');
let myCoin = new Blockchain();
const tx1 = new Transaction(myWalletAddress, 'address2', 20);
tx1.signTransaction(myKey);
myCoin.addTransaction(tx1);
const tx2 = new Transaction(myWalletAddress, 'address1', 5);
tx2.signTransaction(myKey);
myCoin.addTransaction(tx2);
console.log("Start mining...");
myCoin.minePendingTransaction(myWalletAddress);
console.log("Balance of myWalletAddress: ", myCoin.getBalanceOfAddress(myWalletAddress));
myCoin.minePendingTransaction(myWalletAddress);
console.log("Balance of myWalletAddress: ", myCoin.getBalanceOfAddress(myWalletAddress));
 
 
 
 
 
 
========================================================== PRACTICAL 3 : ==========================================================
    
 1. Write a solidity smart contract to display hello world message.
pragma solidity >=0.4.16 <0.8.20;
contract HelloWorld {
function getString() public pure returns(string memory){
return "Hello World";
}
}
 
 
 
 
 
 
Q 2. Write a solidity smart contract to demonstrate state variable, local variable and global variable.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract prac3_2 {
uint sortedData;
constructor() {
sortedData = 10;
}
function getResult() public view returns (uint) {
return sortedData; }} }
function getResult() public view returns (uint) {
return sortedData; }}
 
 
 
 
 
 
Q 3. Write a solidity smart contract to demonstrate getter and setter methods.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract prac3_3{
uint number;
function setNumber(uint num) public{
number=num;
 }
function getNumber() public view returns( uint){
return number ; } }
 
 
 
 
 
 
Q 4. Write a solidity smart contract to demonstrate function modifier.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract modifierWithoutArg {
address admin;
struct employee{
uint emp_id;
string emp_name;
uint age;
 }
constructor() {
admin = msg.sender;
 }
modifier isAdmin {
require(admin == msg.sender);
_;
 }
employee e;
function enterDetails (uint _empid, string memory _empname, uint _empage) public isAdmin {
e.emp_id = _empid;
e.emp_name = _empname;
e.age = _empage; }
 }
 
 
 
 
 
 
Q 5. Write a Solidity program to demonstrate arrays Push operation and Pop operation.
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract ArrayOperations {
uint256[] public dynamicArray;
function pushElement(uint256 _value) public {
dynamicArray.push(_value);
 }
function popElement() public {
require(dynamicArray.length > 0, "Array is empty; cannot pop.");
dynamicArray.pop();
 }
function getArrayLength() public view returns (uint256) {
return dynamicArray.length;
 }
function getElementAtIndex(uint256 index) public view returns (uint256) {
require(index < dynamicArray.length, "Index out of bounds.");
return dynamicArray[index];
 }
 }
 
 
 
 
 
 
Q 6. Write a Solidity program to demonstrate creating a fixed-size array and access array element.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract FixedSizeArrayDemo {
uint256[5] public fixedArray;
constructor() {
fixedArray[0] = 10;
fixedArray[1] = 20;
fixedArray[2] = 30;
fixedArray[3] = 40;
fixedArray[4] = 50; }
function getElement(uint256 index) public view returns (uint256) {
require(index >= 0 && index < fixedArray.length, "Index out of bounds");
return fixedArray[index];
 }
function setElement(uint256 index, uint256 value) public {
require(index >= 0 && index < fixedArray.length, "Index out of bounds");
fixedArray[index] = value;OUTPUT:
}
}
    
    
    
    
    
    
Q 7. Write a Solidity program to demonstrate creating a fixed-size array and access array element.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract DynamicArrayDemo {
uint256[] public dynamicArray;
function addElement(uint256 _value) public {
dynamicArray.push(_value)
 }
function getElement(uint256 index) public view returns (uint256) {
require(index >= 0 && index < dynamicArray.length, "Index out of bounds");
return dynamicArray[index];
 }
function getArrayLength() public view returns (uint256) {
returnOUTPUT:
dynamicArray.length;
Practical No - 3
}
}
    
    
    
    
    
    
Q 8. Write a solidity smart contract to demonstrate use of structure.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract test {
struct Book {
string title;
string author;
uint book_id;
 }
Practical No - 3
Book book;
function setBook() public {
book = Book('The Blockchain Developer', 'Elad Elrom', 11254);function getBookId() public view returns (uint) {
return book.book_id; }
}
}
    
    
    
    
    
    
Q 9. Write a solidity smart contract to calculate percentage of marks obtained by students for six subject in final examination.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract percentageCalculator{
uint sub1;uint sub2;uint sub3;uint sub4;uint sub5;uint sub6;
function setSub1Marks(uint s1) public{
sub1=s1; }
function setSub2Marks(uint s2) public{
sub2=s2; }
function setSub3Marks(uint s3) public{
sub3=s3;
 }
function setSub4Marks(uint s4) public{
sub4=s4;
 }
function setSub5Marks(uint s5) public{
sub5=s5;
 }
function setSub6Marks(uint s6) public{
sub6=s6;
 }
function getPercentage() public view returns(uint){
return ((sub1+sub2+sub3+sub4+sub5+sub6)/6);
 }
 }
    
    
    
    
    
    
Q 10. Write a solidity smart contract to find the factorial of entered number.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract factorial {
uint num;
function set(uint n) public{
num=n; }
function getResult() public view returns(uint){
uint fact=1;
uint n1=num;
while(n1>0){
fact=n1*fact;
n1--;
 }
return fact; }
}
    
    
    
    
    
    
Q 11. Write a solidity smart contract to check whether entered number is palindrome or not.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract pract3_8{
uint number;
function setNumber(uint n1) public {
number=n1;
}
function getPalindrome() public view returns(string memory) {
uint no=number;
uint remainder;
uint sum=0;
uint temp=number;
while(no>0) {
remainder=no%10;
Practical No - 3
sum=(sum*10)+remainder;
no=no/10;
}
if(temp==sum)
return "Number is Palindrome.";
else
return "Number is not Palindrome";
}
}
 
    
    
    
    
    
Q 12. Write a solidity smart contract to generate Fibonacci Series up to given number.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract pract3_9{
uint number_of_terms;
function set (uint n) public {
number_of_terms=n; }
function getFiboSeries() public view returns (uint[] memory ) {
uint a=0;
uint b=1;
Practical No - 3
uint c;
uint[] memory result=new uint[](number_of_terms);
result[0]=a;
result[1]=b;
for(uint i=2;i<number_of_terms;i++){
c=a+b;
result[i]=c;
a=b;
b=c;
 }
return result;
 }}
 
    
    
    
    
    
Q 13. Write a solidity smart contract to check whether entered number is prime number or not.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract prime{
uint number;
function pract3_10(uint n1) public{
number=n1;
}
function getPrime() public view returns(string memory) {
Practical No - 3
for(uint i = 2; i <number; i++) {
if(number % i == 0) {
return " Number is not Prime";
}
}
return " Number is Prime";
}
}
 
    
    
    
    
    
Q 14. Write a solidity smart contract to create arithmetic calculator which includes functions for operations addition, subtraction, multiplication, division etc.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract pract3_11 {
uint number1;
uint number2;
function setNumber1(uint n1) public{
number1=n1 }
function SetNumber2(uint n2) public{
Practical No - 3
number2=n2; }
function getAddition() public view returns(uint){
return number1+number2; }
function getSubstraction() public view returns(uint){
return number1-number2; }
function getMultiplication() public view returns(uint){
return number1*number2; }
function getDivision() public view returns(uint){
return number1/number2; }
 }
 
    
    
    
    
    
Q 15. Write a solidity smart contract to demonstrate view function and pure function.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract pract3_12 {
function view_demo() public pure returns(uint product, uint sum) {
uint a = 1; uint b = 2; // local variable
Practical No - 3
product = a * b;
sum = a + b;
 }
function pure_demo() public pure returns(uint product, uint sum) {
uint a = 1;
uint b = 2;
product = a * b;
sum = a + b;
 }
 }
 
    
    
    
    
    
Q 16. Write a solidity smart contract to demonstrate inbuilt mathematical functions.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract pract3_13 {
function callAddMod() public pure returns(uint) {
return addmod(4, 5, 3);
 }
function callMulMod() public pure returns(uint) {
return mulmod(4, 5, 3);
 }
 }
 
    
    
    
    
    
Q 17. Write a solidity smart contract to demonstrate inheritance in contract.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract pract3_14 {
address public owner;
uint256 public value;
constructor() {
owner = msg.sender;
 }
function setValue(uint256 _newValue) public {
require(msg.sender == owner, "Only the owner can set the value");
value = _newValue; }
 }
contract ChildContract is pract3_14 {
string public message;
constructor(string memory _message) {
message = _message;
 }
 }
 
    
    
    
    
    
Q 18. Write a solidity smart contract to demonstrate events.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract eventDemo {
event Log(address indexed sender, string message);
event AnotherLog();
function test() public {
emit Log(msg.sender, "Hello World!");
emit Log(msg.sender, "Hello EVM!");
emit AnotherLog();
 }
 }
 
    
    
    
    
    
Q 19. Write a solidity smart contract to demonstrate assert statement and revert statement.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <=0.8.22;
contract AssertRevertDemo {
address public owner;
 uint256 public value;
 constructor() { owner = msg.sender;
function setValue(uint256 _newValue) public {
require(msg.sender == owner, "Only the owner can set the value"); value = _newValue;
}
function assertExample(uint256 a, uint256 b) public pure returns (uint256) {
assert(a < b);
 return a + b;
 }
function revertExample() public pure {require(false, "This function intentionally reverts");
}
}}
 
    
    
    
    
    
Q 20. Write a solidity smart contract for Bank Account which provides operations such as check account balance, withdraw amount and deposit amount etc.
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <0.8.20;
contract FinancialContract{
address owner;
constructor(){
owner= msg.sender;
 }
modifier ifOwner() {
if(owner!=msg.sender) {
revert("Only owner is allowed to withdraw ethers!");
Practical No - 3
}else{
_;
 }
 }
function receiveDeposit() public payable{ }
function checkBalance() public view returns (uint){
return address (this).balance;
 }
function withdraw(uint amount) public ifOwner{
payable (msg.sender).transfer(amount);
 }
 }
 
    
    
    
    
    
Q 21. Write a program in solidity to create a structured student with Roll no, Name, Class, Department, Course enrolled as variables.
I) Add information of 5 students.
ii) Search for a student using Roll no
iii) Display all information
// SPDX-License-Identifier: MIT
pragma solidity >=0.4.16 <0.8.20;
contract StudentRegistry {
struct Student {
uint256 rollNo;
string name;
string class;
string department;
string courseEnrolled;
 }
mapping(uint256 => Student) public students;
uint256 public studentCount;
event StudentAdded(uint256 rollNo, string name);
function addStudent(
uint256 _rollNo,
string memory _name,
string memory _class,
string memory _department,
string memory _courseEnrolled
) public {
require(_rollNo != 0, "Roll number must be greater than 0");
require(bytes(_name).length > 0, "Name cannot be empty");
students[_rollNo] = Student({
rollNo: _rollNo,
name: _name,
class: _class,
department: _department,
courseEnrolled: _courseEnrolled });
studentCount++;
emit StudentAdded(_rollNo, _name);
 }
function getStudent(uint256 _rollNo)
public
view
returns (
uint256 rollNo,
string memory name,
string memory class,
Practical No - 3
string memory department,
string memory courseEnrolled){
Student storage student = students[_rollNo];
return (
student.rollNo,
student.name,
student.class,
student.department,
student.courseEnrolled );}
function getAllStudents()
public
view
returns (Student[] memory){
Student[] memory studentList = new Student[](studentCount);
for (uint256 i = 1; i <= studentCount; i++) {
studentList[i - 1] = students[i];
 }
return studentList; }}
 
    
    
    
    
    
Q 22. Create a structure Consumer with Name , Address, Consumer ID, Units and Amount as members. Write a program in solidity to calculate the total electricity bill according to the given condition:
For first 50 units Rs. 0.50/unit. For next 100 units Rs. 0.75/unit. For next 100 units Rs. 1.20/unit.
For unit above 250 Rs. 50/unit. An additional surcharge of 20% is added to the bill. 
Display the information of 5 such consumers along with their units consumed and amount.
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract ElectricityBillCal { struct Consumer {
string name;
string consumerAddress;
uint consumerId;
uint units;
uint amount; }
Consumer[5] public consumers;
function calculateBill(uint _consumerIndex, string memory _name, string memory
_consumerAddress, uint _consumerId, uint _units) public {
require(_consumerIndex <= 5, "only 5 consumers are added");
uint billAmount = 0;
uint addCharge = 0;
if (_units <= 50) {
billAmount = (_units * 50)/100; }
else if (_units <= 150) {
billAmount = 50 * 50/100 + ((_units - 50) * 75/100)/100;
} else if (_units <= 250) {
billAmount = 50 * 50/100 + 100 * 75/100 + ((_units - 150) * 120/100)/100;
} else {
 billAmount = 50 * 50/100 + 100 * 75/100 + 100 * 120/100 + (_units - 250) * 250; }
addCharge = (billAmount * 20) / 100;
billAmount = billAmount+addCharge;
consumers[_consumerIndex] = Consumer(_name, _consumerAddress, _consumerId, _units,
billAmount);
}
function getAllConsumersInfo() public view returns(Consumer[5] memory){
return consumers;
}}
 
 
 
 
 
 
=========================================================== PRACTICAL 4 : ===========================================================
  
4. Write a solidity smart contract for performing following task using remixIDE and deployed it on public test network – Goerli / Sapolia using Injected provider environment.
a. To transfer funds (ethers) from user account to contract account.
b. To withdraw funds (ethers) from contract account to user account.
c. To apply restriction that only owner of the contract can withdraw funds (ethers) from contract account to his/her user account.
 
FundManager.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract FundManager {
address public owner;
modifier onlyOwner() {
require(msg.sender == owner, "Only owner can call this function");
_;
}
constructor() {
owner = msg.sender;
}
function transferToContract() external payable {
}
function withdrawToUser(uint256 amount) external onlyOwner {
require(amount > 0, "Amount must be greater than 0");
require(address(this).balance >= amount, "Insufficient funds in the
contract");
payable(msg.sender).transfer(amount);
}
function getContractBalance() external view returns (uint256) {
return address(this).balance;
}
}
 
 
 
 
 
 
5. Write a smart contract to calculate the compound interest and deploy it on Ganache using injected provider. Truffle – Ganache
Orange.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.9;
contract Orange {
function compoundInterest(uint _principal, uint _periods, uint _rate) external
pure returns(uint) {
uint yield;
for(uint i=0; i< _periods; i++){
yield = _principal * _rate / 100;
_principal += yield;
}
return yield;
}
}
 
 
 
 
 
 
6. Build and test decentralized application (Dapp) for Election Voting System on the local Ethereum Blockchain Network Ganache using truffle suite.
Election.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.5.16;
contract Election {
struct Candidate {
uint id;
string name;
uint voteCount;
}
mapping(uint => Candidate) public candidates;
mapping(address => bool) public voters;
uint public candidatesCount;
constructor() {
addCandidate("Candidate 1");
addCandidate("Candidate 2");
}
function addCandidate(string memory _name) private {
candidatesCount++;
candidates[candidatesCount] = Candidate(candidatesCount, _name, 0);
}
function vote(uint _candidateId) public {
require(_candidateId > 0 && _candidateId <= candidatesCount, "Invalid
candidate ID");
require(!voters[msg.sender], "You have already voted");
voters[msg.sender] = true;
candidates[_candidateId].voteCount++;
}
}
 
 
 
 
 
 
7. Build and test decentralized application, (Dapp) for Banking System on the local Ethereum Blockchain Network Ganache using truffle suite.
Banking.sol
// SPDX-License-Identifier: MIT
pragma solidity >=0.6<0.9;
contract Banking {
mapping (address => uint) public userAccount; // Balance
mapping (address => bool) public userExists;
function createAcc() public payable returns (string memory) {
require(!userExists[msg.sender], 'Account already created');
if (msg.value == 0) {
userAccount[msg.sender] = 0;
} else {
userAccount[msg.sender] = msg.value;
}
userExists[msg.sender] = true;
return 'Account created!';
}
function deposit() public payable returns (string memory) {
require(userExists[msg.sender], 'Account is not created');
require(msg.value > 0, 'Value for deposit is not zero');
userAccount[msg.sender] += msg.value;
return 'Deposited successfully';
}
function withdraw(uint amount) public returns(string memory) {
require(userExists[msg.sender], 'Account is not created');
require(userAccount[msg.sender] >= amount, 'Insufficient balance in
bank account');
require(amount > 0, 'Enter a non-zero value for withdrawal');
userAccount[msg.sender] -= amount;
payable(msg.sender).transfer(amount);
return 'Withdrawal successful';
}
function transferAmount(address payable userAddress, uint amount)
public returns (string memory) {
require(userExists[msg.sender], 'Account is not created');
require(userAccount[msg.sender] >= amount, 'Insufficient balance in
bank account');
require(userExists[userAddress], 'Recipient account does not exist in
bank accounts');
require(amount > 0, 'Enter a non-zero value for sending');
userAccount[msg.sender] -= amount;
userAccount[userAddress] += amount;
return 'Transfer successful';
}
function sendAmount(address payable toAddress, uint256 amount)
public returns (string memory) {
require(userExists[msg.sender], 'Account is not created');
require(userAccount[msg.sender] >= amount, 'Insufficient balance in
bank account');
require(amount > 0, 'Enter a non-zero value for withdrawal');
userAccount[msg.sender] -= amount;
toAddress.transfer(amount);
return 'Transfer successful';
}
function userAccountBalance() public view returns (uint) {
return userAccount[msg.sender];
}
function accountExists() public view returns(bool) {
return userExists[msg.sender];
}
}